{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const getDataFromApi = createApi({\n  reducerPath: 'getDataFromApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3000/'\n  }),\n  endpoints: builder => ({\n    getProducts: builder.query({\n      query: () => `products`\n    }),\n    deleteProduct: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `products/${id}`,\n        method: 'DELETE'\n      })\n    })\n  })\n});\nexport const {\n  useGetProductsQuery\n} = getDataFromApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","getDataFromApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getProducts","query","deleteProduct","mutation","id","url","method","useGetProductsQuery"],"sources":["/Users/ryan/framework-front/src/services/getData.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { ProductType } from '../types'\n\nexport const getDataFromApi = createApi({\n    reducerPath: 'getDataFromApi',\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3000/' }),\n    endpoints: (builder) => ({\n        getProducts: builder.query<ProductType[], void>({\n            query: () => `products`,\n        }),\n        deleteProduct: builder.mutation<string>({\n            query: ({ id }) => ({\n                url: `products/${id}`,\n                method: 'DELETE',\n            }),\n        }),\n    }),\n})\n\nexport const {\n    useGetProductsQuery,\n} = getDataFromApi\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAGxE,OAAO,MAAMC,cAAc,GAAGF,SAAS,CAAC;EACpCG,WAAW,EAAE,gBAAgB;EAC7BC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,SAAS,EAAGC,OAAO,KAAM;IACrBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAsB;MAC5CA,KAAK,EAAEA,CAAA,KAAM;IACjB,CAAC,CAAC;IACFC,aAAa,EAAEH,OAAO,CAACI,QAAQ,CAAS;MACpCF,KAAK,EAAEA,CAAC;QAAEG;MAAG,CAAC,MAAM;QAChBC,GAAG,EAAE,YAAYD,EAAE,EAAE;QACrBE,MAAM,EAAE;MACZ,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTC;AACJ,CAAC,GAAGb,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}